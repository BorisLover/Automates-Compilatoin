/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;
import Graphes.Graphstreams;
import gestautomates.Automations;
import gestautomates.StringOpperation;
import gestautomates.DetemisedAtaumates;
import gestautomates.Etats;
import gestautomates.MinimisedAutomate;
import gestautomates.WordAgnolege;
import java.awt.BorderLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import org.graphstream.graph.Edge;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.ui.view.View;
import org.graphstream.ui.view.Viewer;

/**
 *
 * @author NAVEROLE K
 */
public class GestAuto extends javax.swing.JFrame {
    Automations aut=new Automations();
    DetemisedAtaumates detAut=new DetemisedAtaumates();
    MinimisedAutomate minAu=new MinimisedAutomate();
    StringOpperation strOpp=new StringOpperation();
    WordAgnolege wordAgno=new WordAgnolege();
    List LAutmat=new ArrayList();
    List chemain_afd=new ArrayList();
    List chemain_afd_min=new ArrayList();
    List rec_afd=new ArrayList();
    List rec_afd_min=new ArrayList();
    List old_afn=new ArrayList();
    List old_afd=new ArrayList();
    List old_afd_min=new ArrayList();
    //List chemin=new ArrayList();
    View views;
    String oldWord="";
    String oldExpr="";
    String active="";
    /**
     * Creates new form GestAuto
     */
    public GestAuto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jPanel1 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jTabbedPane7 = new javax.swing.JTabbedPane();
        jScrollBar2 = new javax.swing.JScrollBar();
        jPanel2 = new javax.swing.JPanel();
        jScrollBar1 = new javax.swing.JScrollBar();
        jPanel3 = new javax.swing.JPanel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollBar3 = new javax.swing.JScrollBar();
        answerTreatment1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        expre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        alphabet = new javax.swing.JTextField();
        answerKnown = new javax.swing.JTextField();
        automates = new javax.swing.JTabbedPane();
        afn = new javax.swing.JTabbedPane();
        afd = new javax.swing.JTabbedPane();
        afd_min = new javax.swing.JTabbedPane();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        word = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        answerTreatment = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jScrollPane2.setViewportView(jTextPane1);

        jTextField1.setText("expretion");

        jScrollPane1.setViewportView(jEditorPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 105, Short.MAX_VALUE)
        );

        jTextField4.setText("jTextField4");

        jTabbedPane3.addTab("tab1", jTabbedPane4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 687, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 373, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 670, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 373, Short.MAX_VALUE)
        );

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollBar3.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                jScrollBar3AncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollBar3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                jScrollBar3ComponentMoved(evt);
            }
        });

        answerTreatment1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerTreatment1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Entre l'expression");

        expre.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                expreInputMethodTextChanged(evt);
            }
        });

        jLabel2.setText("Entre l'alphabet");

        answerKnown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerKnownActionPerformed(evt);
            }
        });

        afn.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                afnComponentShown(evt);
            }
        });
        automates.addTab("AFN", afn);

        afd.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                afdComponentShown(evt);
            }
        });
        automates.addTab("AFD", afd);

        afd_min.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                afd_minComponentShown(evt);
            }
        });
        automates.addTab("AFD MINIMAL", afd_min);

        jButton1.setInheritsPopupMenu(true);
        jButton1.setLabel("Verifier");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel3.setText("Entre le Mot a Reconnaitre");

        answerTreatment.setColumns(20);
        answerTreatment.setRows(5);
        jScrollPane3.setViewportView(answerTreatment);

        jLabel4.setText("       Données traitté");

        jLabel5.setText("     Resultat");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alphabet, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(expre, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(word, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(automates)
                        .addGap(45, 45, 45))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(answerKnown, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(276, 276, 276)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(expre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alphabet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(word, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(automates, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(answerKnown, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        automates.getAccessibleContext().setAccessibleName("AFN");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void answerKnownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerKnownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerKnownActionPerformed

    private void answerTreatment1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerTreatment1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerTreatment1ActionPerformed

    private void afnComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_afnComponentShown
        constructAfn();
        /*String expres=(String)expre.getText();
        
        List autmats=automat();
        if(!autmats.isEmpty()){
            if(!LAutmat.isEmpty() && !expres.isEmpty()){
                oldExpr=(String)LAutmat.get(2);
                System.out.println("AFN1 expre : "+oldExpr); 
            }else if(LAutmat.isEmpty()){
                if(!expres.isEmpty() && !expres.equals(oldExpr))
                     oldExpr=expres;
                LAutmat=autmats;
                System.out.println("not emp AFN1 express : "+expres+" old  : "+oldExpr);
            }
            System.out.println("AFN1 express : "+expres+" old  : "+oldExpr);
            int componentNb=afn.getComponents().length;
            if(!expres.isEmpty()){
                System.out.println("AFN1 compb  0 : ");
                if(expres.equals(oldExpr)){
                    System.out.println("AFN1 expre same : ");
                    if(componentNb==0){
                        showAutGraph(autmats,componentNb,0,"afn",afn,0);
                        old_afn=(ArrayList)autmats.get(0);
                    }else if(!old_afn.isEmpty() && !old_afn.equals(autmats.get(0))){
                        showAutGraph(autmats,componentNb,1,"afd",afn,1);
                        old_afn=(ArrayList)autmats.get(0);
                    }
                }
                else{
                    showAutGraph(autmats,componentNb,0,"afn",afn,0);
                    old_afn=(ArrayList)autmats.get(0);
                    System.out.println("AFN1 expres diff: ");
                }
            }
        }
        active="afn";*/
System.out.println("AFN");
    }//GEN-LAST:event_afnComponentShown

    private void afdComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_afdComponentShown
        constructAfd();
        /*String expres=(String)expre.getText();
        List autmats=automat();
        if(!autmats.isEmpty()){
            if(!LAutmat.isEmpty() && !expres.isEmpty()){
                oldExpr=(String)LAutmat.get(2);
                System.out.println("AFD1 old : "+oldExpr);
            }else if(LAutmat.isEmpty()){
                if(!expres.isEmpty() && !expres.equals(oldExpr))
                    oldExpr=expres;
                LAutmat=autmats;
                System.out.println("not emp AFD1 equ : "+expres+" old  : "+oldExpr);
            }
            int componentNb=afd.getComponents().length;
                System.out.println("simple emp AFN1 express : "+expres+" old  : "+oldExpr);
            if(!expres.isEmpty()){
                if(expres.equals(oldExpr)){
                System.out.println("same AFN1 express : "+expres+" old  : "+oldExpr);
                    if(componentNb==0){
                        System.out.println("not emp AFN1 componentNb : "+componentNb);
                        showAutGraph(autmats,componentNb,1,"afd",afd,1);
                        old_afd=(ArrayList)autmats.get(1);
                    }else if(!old_afd.isEmpty() && !old_afd.equals(autmats.get(1))){
                        showAutGraph(autmats,componentNb,1,"afd",afd,1);
                        old_afd=(ArrayList)autmats.get(1);
                    }
                }
                else{
                    System.out.println("AFD3");
                    showAutGraph(autmats,componentNb,1,"afd",afd,1);
                    old_afd=(ArrayList)autmats.get(1);
                    
                }
            }
        }
        active="afd";*/
        System.out.println("AFD");
    }//GEN-LAST:event_afdComponentShown
public boolean andLogic(boolean pro1, boolean pro2,boolean pro3, boolean pro4){
    if((pro1 && pro2)==true && (pro2 && pro3)==true)
        return true;
    return false;
}
//Make thing show slowly
protected void sleep() {
        try { Thread.sleep(1100); } catch (Exception e) {}
}
    private void afd_minComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_afd_minComponentShown
        constructAfdMin();
    }//GEN-LAST:event_afd_minComponentShown

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        String expres=(String)expre.getText();
        String words=(String)word.getText();
        List symbol;
        Boolean tes=true;//veut dire on peut tenter la recognaisence et false veut dir cela ne vaut pas la peinne
        System.out.println("----------------------------------------+++++++++++++11 new : "+words+" word : "+oldWord);
        List autmats=automat();
        if(!autmats.isEmpty()){
            if(!expres.isEmpty() && !words.isEmpty()){
                if(LAutmat.isEmpty()){
                    LAutmat=autmats;
                    oldWord=words;
                }
                else if(!expres.equals(LAutmat.get(2)) ){
                    LAutmat=autmats;
                    oldWord=words;
                }
                else if(oldWord.isEmpty()){
                    System.out.println("new : "+words+" word : "+oldWord);
                    oldWord=words;
                    LAutmat=autmats;
                }
                else if(!oldWord.equalsIgnoreCase(words)){
                    oldWord=words;
                    LAutmat=autmats;
                }else
                    tes=false;
                if(tes){
                    List autmat_min=(ArrayList)LAutmat.get(3);//afd_min
                    List autmat_afd=(ArrayList)LAutmat.get(1);//afd
                    //List autmat=(ArrayList)LAutmat.get(1);//afd
                    String sym=(String)alphabet.getText();
                    if(!sym.isEmpty())
                        symbol=strOpp.stringToList(sym);
                    else
                        symbol=strOpp.getSymbols(oldWord);
                    System.out.println("-----sym : "+symbol+" word : "+oldWord);
                    rec_afd_min=wordAgno.reconnaissence(autmat_min, oldWord, symbol);
                    rec_afd=wordAgno.reconnaissence(autmat_afd, oldWord, symbol);
                    System.out.println("+++++++sym : "+symbol+" word : "+oldWord);
                    if((boolean)rec_afd.get(0) && (boolean)rec_afd_min.get(0)){
                        HashMap knownOrNot_afd=(HashMap)rec_afd.get(1);
                        HashMap knownOrNot_afd_min=(HashMap)rec_afd_min.get(1);
                        if(!((ArrayList)(rec_afd.get(2))).isEmpty()){
                            chemain_afd=(ArrayList)rec_afd.get(2);
                            switch(active){
                                case "afdm" : int afd_min_componentNb=afd_min.getComponents().length;
                                    if(afd_min_componentNb>0){
                                        afd_min.remove(afd_min.getComponents()[0]);
                                        constructAfdMin();
                                    }else constructAfdMin();
                                    break;
                                case "afd" : int afd_componentNb=afd.getComponents().length;
                                    if(afd_componentNb>0){
                                        afd.remove(afd.getComponents()[0]);
                                        constructAfd();
                                    }else constructAfd();
                                    break;
                                case "afn" : int afn_componentNb=afd.getComponents().length;
                                    if(afn_componentNb>0){
                                        afd.remove(afd.getComponents()[0]);
                                        constructAfn();
                                    }else constructAfn();
                                    break;
                            }
                        }
                        if(!((ArrayList)(rec_afd_min.get(2))).isEmpty()){
                            chemain_afd_min=(ArrayList)rec_afd_min.get(2);
                            switch(active){
                                case "afdm" : int afd_min_componentNb=afd_min.getComponents().length;
                                    if(afd_min_componentNb>0){
                                        afd_min.remove(afd_min.getComponents()[0]);
                                        constructAfdMin();
                                    }else constructAfdMin();
                                    break;
                                case "afd" : int afd_componentNb=afd.getComponents().length;
                                    if(afd_componentNb>0){
                                        afd.remove(afd.getComponents()[0]);
                                        constructAfd();
                                    }else constructAfd();
                                    break;
                                case "afn" : int afn_componentNb=afd.getComponents().length;
                                    if(afn_componentNb>0){
                                        afd.remove(afd.getComponents()[0]);
                                        constructAfn();
                                    }else constructAfn();
                                    break;
                            }
                        }
                        answerKnown.setText("");
                        answerTreatment.setText("");
                        answerKnown.setText(words+"  est un mot de l'expression : "+expres);
                        if(!knownOrNot_afd.isEmpty())
                            answerTreatment.setText(wordAgno.afficheTrait(knownOrNot_afd));
                        else
                            //answerKnown.setText(words+"  n'est pas un mot de l'expression : "+expres);
                            answerTreatment.setText("");
                        answerTreatment.setEditable(false);
                        answerKnown.setEditable(false);
                    }else{
                        chemain_afd=new ArrayList();
                        chemain_afd_min=new ArrayList();
                        switch(active){
                                case "afdm" : int afd_min_componentNb=afd_min.getComponents().length;
                                    if(afd_min_componentNb>0){
                                        afd_min.remove(afd_min.getComponents()[0]);
                                        constructAfdMin();
                                    }else constructAfdMin();
                                    break;
                                case "afd" : int afd_componentNb=afd.getComponents().length;
                                    if(afd_componentNb>0){
                                        afd.remove(afd.getComponents()[0]);
                                        constructAfd();
                                    }else constructAfd();
                                    break;
                                case "afn" : int afn_componentNb=afd.getComponents().length;
                                    if(afn_componentNb>0){
                                        afd.remove(afd.getComponents()[0]);
                                        constructAfn();
                                    }else constructAfn();
                                    break;
                            }
                        answerKnown.setText(words+"  n'est pas un mot de l'expression : "+expres);
                        answerTreatment.setText("");
                    }
                    
                }
            }
            
        }
    }//GEN-LAST:event_jButton1MouseClicked
    //DANS LA LISTE RETOURNé ICI LE PREMIER EST L'AFN SUIVI DE L'AFD ENSUIT L'EXPRESSION
    private List automat(){
        List res=new ArrayList();
        String expres=(String)expre.getText();
        System.out.println("Expr : "+expres);
        String postfixExpress=strOpp.traitString(expres);
        if(!postfixExpress.isEmpty() && !"erreur".equalsIgnoreCase(postfixExpress)){
            System.out.println("ExprTrai : "+postfixExpress);
            postfixExpress=strOpp.postfixe(postfixExpress);
            System.out.println("ExprPost : "+postfixExpress);
            List autmat=aut.creatAutomation(postfixExpress);
            aut.affichListList(autmat);
            res.add(autmat);
            String sym=(String)alphabet.getText();
            List symbol;//=strOpp.stringToList(sym);
            String words=(String)word.getText();
            System.out.println("word : "+words);
            alphabet.setText("");
            if(sym.isEmpty() || !expres.equalsIgnoreCase(oldExpr)){
                symbol=strOpp.getSymbols(expres);
                sym=strOpp.listToString(symbol);
                alphabet.setText(sym);
            }else{
                symbol=strOpp.stringToList(sym);
                alphabet.setText(sym);
            }
            autmat=detAut.convertToDetAutmat(autmat, symbol);
            List autmat1=autmat;
            aut.affichListList(autmat);
            res.add(autmat);
            res.add(expres);
            autmat=minAu.completAutomate(autmat, symbol);
            autmat=minAu.Sciender(autmat, (ArrayList<Character>)symbol);
            autmat=minAu.converToMinDetemisedAut(autmat1, autmat, (ArrayList<Character>)symbol);
            res.add(autmat);
            return res;
        }
        return res;
    }
    public void explore(Graphstreams gst,List autmat,Stack lEtsFin){
        System.out.println("explorrrreeeee  : "+lEtsFin);
        if(!autmat.isEmpty() && !lEtsFin.isEmpty()){
        Iterator<? extends Node> k = gst.getGraph().getNode("0").getBreadthFirstIterator();
            while (k.hasNext()) {
                Node next = k.next();
                System.out.println("etas    ++++++++++++++++++++++++++++"+((String)next.getId()));
                int siz=lEtsFin.size();
                String etas="";
                //if(!lEtsFin.isEmpty())
                etas=(String)next.getId();
                System.out.println("ettttttt : "+etas);
                if((etas).equalsIgnoreCase("0")){
                    next.setAttribute("ui.class", "initial");
                    System.out.println("ifffffffffffff");
                }
                if(lEtsFin.contains(etas)){
                        next.setAttribute("ui.class", "final");
                        System.out.println("iiiiifffffffffffff etas "+etas);
                }else if(!etas.equalsIgnoreCase("0")){
                    System.out.println("iiiiifffffffffffff empy ");
                    next.setAttribute("ui.class", "marked");
                }

           }
        }
    }
    public void showWay(Graphstreams gst, Stack way){
        while(!way.isEmpty()){
            int t=(int)way.pop();
            Node n1=gst.getGraph().getNode(t+"");
            if(!way.isEmpty()){
                Node n2=gst.getGraph().getNode(way.peek()+"");
                if(n1!=null && n2!=null){
                    Edge edge=n2.getEdgeToward(n1);if( null!=edge && !"way".equalsIgnoreCase(edge.getAttribute("ui.class"))) {
                        edge.setAttribute("ui.class", "way");
                    }
                }
            }
        }
    }
    public void showAutGraph(List autmats,int componentNb,int autpos,String autTyp,JTabbedPane comp,int stackType){
                    System.out.println("AFN1 expres diff: "+autmats);
                    LAutmat=autmats;
                    List autmat=(ArrayList)LAutmat.get(autpos);
                    System.out.println("autmat+ : "+autmat);
                    Graphstreams gst=new Graphstreams(autmat,autTyp);
                    Stack lEtsFin;
                    if(stackType==0){
                        lEtsFin=new Stack();
                        lEtsFin.add((aut.getEtatFin(autmat).getqc())+"");
                        System.out.println("lEtsFin afd+ : "+lEtsFin);
                    }
                    else if(stackType==1){
                       lEtsFin=strOpp.listToStackEtasQc(detAut.getEtatFinal(autmat));
                       System.out.println("lEtsFin afd : "+lEtsFin);
                    }else lEtsFin=strOpp.listToStackEtasQc(detAut.getEtatFinal(autmat));
                    explore(gst,autmat,lEtsFin);
                    if("afd".equalsIgnoreCase(autTyp)){
                        if(!chemain_afd.isEmpty() && !oldWord.isEmpty() && !"afn".equalsIgnoreCase(autTyp)){
                            Stack chem=strOpp.listToStack(chemain_afd);
                            showWay(gst,chem);
                        }
                    }else if("afd_min".equalsIgnoreCase(autTyp)){
                        if(!chemain_afd_min.isEmpty() && !oldWord.isEmpty() && !"afn".equalsIgnoreCase(autTyp)){
                            Stack chem=strOpp.listToStack(chemain_afd_min);
                            showWay(gst,chem);
                        }
                    }
                    Viewer viewer= new Viewer(gst.getGraph(), Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
                    viewer.enableAutoLayout();
                    View view = viewer.addDefaultView(false);
                    if(componentNb>0){
                        comp.remove(comp.getComponents()[0]);
                    }
                    comp.add((Component) view);
                }
   
    //construction of afd
    public void constructAfd(){
     String expres=(String)expre.getText();
        List autmats=automat();
        if(!autmats.isEmpty()){
            if(!LAutmat.isEmpty() && !expres.isEmpty()){
                oldExpr=(String)LAutmat.get(2);
                System.out.println("AFD1 old : "+oldExpr);
            }else if(LAutmat.isEmpty()){
                if(!expres.isEmpty() && !expres.equals(oldExpr))
                    oldExpr=expres;
                LAutmat=autmats;
                System.out.println("not emp AFD1 equ : "+expres+" old  : "+oldExpr);
            }
            int componentNb=afd.getComponents().length;
                System.out.println("simple emp AFN1 express : "+expres+" old  : "+oldExpr);
            if(!expres.isEmpty()){
                if(expres.equals(oldExpr)){
                System.out.println("same AFN1 express : "+expres+" old  : "+oldExpr);
                    if(componentNb==0){
                        System.out.println("not emp AFN1 componentNb : "+componentNb);
                        showAutGraph(autmats,componentNb,1,"afd",afd,1);
                        old_afd=(ArrayList)autmats.get(1);
                    }else if(!old_afd.isEmpty() && !old_afd.equals(autmats.get(1))){
                        showAutGraph(autmats,componentNb,1,"afd",afd,1);
                        old_afd=(ArrayList)autmats.get(1);
                    }
                }
                else{
                    System.out.println("AFD3");
                    showAutGraph(autmats,componentNb,1,"afd",afd,1);
                    old_afd=(ArrayList)autmats.get(1);
                }
            }
        }
        active="afd";
        System.out.println("AFD");
    }                   
    
public void constructAfdMin(){
    String expres=(String)expre.getText();
    List autmats=automat();
    if(!autmats.isEmpty()){
        if(!LAutmat.isEmpty() && !expres.isEmpty()){
            oldExpr=(String)LAutmat.get(2);
            System.out.println("AFD1_min old : "+oldExpr);
        }else if(LAutmat.isEmpty()){
            if(!expres.isEmpty() && !expres.equals(oldExpr))
                oldExpr=expres;
            LAutmat=autmats;
            System.out.println("not emp AFD1_Min equ : "+expres+" old  : "+oldExpr);
        }
        int componentNb=afd_min.getComponents().length;
                System.out.println("simple emp AFD_min express : "+expres+" old  : "+oldExpr);
            if(!expres.isEmpty()){
                if(expres.equals(oldExpr)){
                System.out.println("same AFD_min express : "+expres+" old  : "+oldExpr);
                    if(componentNb==0){
                        System.out.println("not emp AFD_min componentNb : "+componentNb);
                        showAutGraph(autmats,componentNb,3,"afd_min",afd_min,2);
                        old_afd_min=(ArrayList)autmats.get(3);
                    }else if(!old_afd_min.isEmpty() && !old_afd_min.equals(autmats.get(3))){
                        showAutGraph(autmats,componentNb,3,"afd_min",afd_min,2);
                        old_afd_min=(ArrayList)autmats.get(3);
                         System.out.println("emp AFD_min componentNb : "+componentNb);
                    }
                }
                else{
                    System.out.println("AFD3_min");
                    showAutGraph(autmats,componentNb,3,"afd_min",afd_min,2);
                    old_afd_min=(ArrayList)autmats.get(3);
                }
            }
    }
    active="afdm";
    System.out.println("AFD Min");
}


//constuction of AFN
    
    public void constructAfn(){
        String expres=(String)expre.getText();
        
        List autmats=automat();
        if(!autmats.isEmpty()){
            if(!LAutmat.isEmpty() && !expres.isEmpty()){
                oldExpr=(String)LAutmat.get(2);
                System.out.println("AFN1 expre : "+oldExpr); 
            }else if(LAutmat.isEmpty()){
                if(!expres.isEmpty() && !expres.equals(oldExpr))
                     oldExpr=expres;
                LAutmat=autmats;
                System.out.println("not emp AFN1 express : "+expres+" old  : "+oldExpr);
            }
            System.out.println("AFN1 express : "+expres+" old  : "+oldExpr);
            int componentNb=afn.getComponents().length;
            if(!expres.isEmpty()){
                System.out.println("AFN1 compb  0 : ");
                if(expres.equals(oldExpr)){
                    System.out.println("AFN1 expre same : ");
                    if(componentNb==0){
                        System.out.println("comb = 0");
                        showAutGraph(autmats,componentNb,0,"afn",afn,0);
                        old_afn=(ArrayList)autmats.get(0);
                    }else if(!old_afn.isEmpty() && !old_afn.equals(autmats.get(0))){
                        System.out.println("comb diff 0");
                        showAutGraph(autmats,componentNb,0,"afn",afn,1);
                        old_afn=(ArrayList)autmats.get(0);
                    }
                }
                else{
                    showAutGraph(autmats,componentNb,0,"afn",afn,0);
                    old_afn=(ArrayList)autmats.get(0);
                    System.out.println("AFN1 expres diff: ");
                }
            }
        }
        active="afn";
System.out.println("AFN");
    }  
    private void jScrollBar3AncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jScrollBar3AncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollBar3AncestorMoved

    private void jScrollBar3ComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollBar3ComponentMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollBar3ComponentMoved

    private void expreInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_expreInputMethodTextChanged
        
    }//GEN-LAST:event_expreInputMethodTextChanged


    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane afd;
    private javax.swing.JTabbedPane afd_min;
    private javax.swing.JTabbedPane afn;
    private javax.swing.JTextField alphabet;
    private javax.swing.JTextField answerKnown;
    private javax.swing.JTextArea answerTreatment;
    private javax.swing.JTextField answerTreatment1;
    private javax.swing.JTabbedPane automates;
    private javax.swing.JTextField expre;
    private javax.swing.JButton jButton1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollBar jScrollBar2;
    private javax.swing.JScrollBar jScrollBar3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField word;
    // End of variables declaration//GEN-END:variables
}
